#!/usr/bin/env python
# -*- coding: UTF-8 -*-
"""
wp-download

This is a downloader for Wikipedia database dumps
"""

# © Copyright 2009 Wolodja Wentland. All Rights Reserved.

# This file is part of wp-download.
#
# wp-download is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# wp-download is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with wp-download. If not, see <http://www.gnu.org/licenses/>.

__version__ = '0.1.1'
__author__ = 'Wolodja Wentland <babilen@gmail.com>'
__copyright__ = '© Copyright 2009-2011 Wolodja Wentland'

import optparse
import logging
import os
import sys

import wp_download as wpd
import wp_download.download as wpd_down
import wp_download.exceptions as wpd_exc

LOG = logging.getLogger('wp-download')
LOG.setLevel(logging.DEBUG)

def init_parser():
    """Initialise command line parser."""

    usage = 'Usage: %prog [options] DIR'
    new_parser = optparse.OptionParser(usage)

    new_parser.add_option('-q', '--quiet',
                          action='store_true', dest='quiet',
                          default=False,
                          help='do not generate output (only report errors)')

    new_parser.add_option('-v', '--verbose',
                          action='store_true', dest='verbose',
                          default=False,
                          help='generate verbose output')

    new_parser.add_option('-c', '--config', metavar='FILE',
                          type='string',
                          default = os.path.expanduser('~/.wpdownloadrc'),
                          help='load configuration from FILE ' \
                               '[default: %default]'
                         )

    new_parser.add_option('--version',
                          action='store_true',
                          default=False,
                          help='display version')

    # Logging related options

    log_options = optparse.OptionGroup(
        new_parser, 'Logging','Specify log file handling.')

    log_level = ['DEBUG', 'INFO', 'WARNING', 'ERROR']

    log_options.add_option('--log-file', metavar='FILE',
                           type='string',
                           help='write logs to FILE')

    log_options.add_option('--log-file-level',
                           help='set log level (' +
                           ', '.join(log_level) +
                           ') [default: %default]',
                           action='store', default='INFO',
                           type='choice', choices=log_level)
    new_parser.add_option_group(log_options)

    # Download related options
    down_options = optparse.OptionGroup(
        new_parser, 'Download', 'Change download behaviour')

    down_options.add_option('--force',
                            action='store_true', dest='force',
                            default=False,
                            help='Force download of all files.')
    down_options.add_option('--resume',
                            action='store_true', dest='resume',
                            default=False,
                            help='Resume partial downloads.')

    down_options.add_option('--timeout',
                            type='int', dest='timeout',
                            default=30,
                            help='Set timeout for download in seconds '
                            '[default: %defaults]')

    down_options.add_option('--retries',
                            type='int', dest='retries',
                            default=3,
                            help='Set number of download attempts '
                            '[default: %default]')

    down_options.add_option('--custom-dump',
                            action='append', dest='custom_dump',
                            metavar='LANG:DATE',
                            help='Download a custom dump for specific language '
                            '(e.g., en:20150603)')

    new_parser.add_option_group(down_options)

    return new_parser

def init_logging(options):
    """Initialise logging framework

    :param options: Options obtained from optparse
    """

    error_handler = logging.StreamHandler(sys.stderr)
    error_handler.setLevel(logging.ERROR)
    error_handler.formatter = logging.Formatter('[%(levelname)s]: %(message)s')
    LOG.addHandler(error_handler)
    wpd.LOG.addHandler(error_handler)

    if not options.quiet and options.verbose:
        console = logging.StreamHandler()
        console.setLevel(logging.INFO)
        console.formatter = logging.Formatter('%(message)s')
        console.addFilter(wpd_down.ErrorLimit())
        LOG.addHandler(console)
        wpd.LOG.addHandler(console)

    if options.log_file:
        log_file_handler = logging.FileHandler(
            options.log_file)
        log_file_handler.setLevel(
            logging.getLevelName(options.log_level))
        log_file_handler.formatter = logging.Formatter(
            '[%(levelname)s]: %(message)s')
        LOG.addHandler(log_file_handler)

    LOG.debug('Logging initialised')


def critical_error(err, exit_code):
    """Terminate program with given exit code

    :param exit_code:   Exit code for sys.exit()
    :type exit_code:    int
    """
    LOG.error(unicode(err))
    sys.exit(exit_code)

if __name__ == '__main__':

    try:
        PARSER = init_parser()
        (OPTIONS, ARGS) = PARSER.parse_args()
        init_logging(OPTIONS)

        if OPTIONS.version:
            print 'wp-download version %s\n%s' % (__version__, __copyright__)
            sys.exit(0)

        if not ARGS:
            print PARSER.get_usage()
            critical_error('Missing argument (download directory)',
                           wpd_exc.EARGUMENT)

        DOWNLOAD_PATH = os.path.abspath(ARGS[0])

        try:
            WP_DOWN = wpd_down.WPDownloader(OPTIONS)
            WP_DOWN.download_all_languages(DOWNLOAD_PATH)

        except wpd_exc.ConfigParseError, cp_err:
            critical_error(cp_err, wpd_exc.ECPARSE)

        except wpd_exc.ConfigValueError, csv_err:
            critical_error(csv_err, wpd_exc.ECVALUE)

        except IOError, io_err:
            critical_error(io_err, wpd_exc.EIO)

    except KeyboardInterrupt:
        LOG.warning('Interrupted by user!')
    finally:
        logging.shutdown()
